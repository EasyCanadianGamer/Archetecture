CSC 325-your_section_here
Lab 2, Part 1
Name: Eyad Merajuddin
Email: merajue1@tcnj.edu


Format numeric values as follows:
- for superscript, use ^, e.g., 2^4 ("two to the fourth power")
- for subscripts, use a number after a variable, e.g., X3 ("X sub 3")
- for hexadecimal values, use the 0x prefix, e.g., 0x123a is hexadecimal
  value "123a"
- use lowercase letters when writing hexadecimal digits a-f
- for binary values, use the 0b prefix, so 0b101010 is binary value "101010"
- for decimal values, use no prefix, so 10431 is decimal value "10431"
- make sure to not have lines longer than 80 characters (explicitly press
  the Enter key to start a new line)

Answer the questions below showing your work and/or explaining your answer. 
• If a question specifies a number of bits, your answer should be in a corresponding 
number of digits. 
– For example, to add two 4-bit values together your answer should be a 4-bit 
value, not a 64-bit one! 
• You can assume that two’s complement is used for signed values, which makes 
the high-order bit an indication of the value’s sign. 
– For example, 1000 should be interpreted as negative when treated as a 4-bit 
signed value (high-order bit is 1). But when interpreted as an 8-bit signed 
value (00001000) it is positive (high-order bit is 0). 


1. What is the largest positive value that can be represented with an unsigned 8-bit 
number? Explain. 

THe largest positive value that can be represented with an unsigned 8bit number
is 255. This is because when you add 1 more bit to the binary number 11111111, it will
carry the 1 to the next bit, making it 100000000. This is 256 in decimal. However,
since we are only using 8 bits, the 1 is lost, so the largest positive value is 255 and
will overflow. 2^8-1 = 255 or 11111111 in binary


2. What is the largest positive value that can be represented with a 2’s complement 8-
bit number? Explain. 

The largest positive value that can be represented with a 2's complement 8bit number
is 127. This is because the range of a 2's complement 8bit number is from -128 to 127, so to
calculate the largest positive value, which only occurs when the sign bit is 0 and the rest of the bits are 1, so 
in binary, it would be 01111111, to calculate the decimal value, we can use the formula
2^7 + 2^6 + 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 = 127, so the largest positive value is 127.

3. Convert the unsigned 8-bit binary value 0b10100110 to decimal. Show your work. 

128 64 32 16 8 4 2 1
 1  0  1  0  0 1 1 0

 128+ 32 + 4 +2 = 166 

4. Convert the signed 8-bit binary value 0b10100110 to decimal. Show your work. 

   128 64 32 16 8 4 2 1
    1   0  1  0 0 1 1 0
                    1 
    0   1  0  1 1 0 0 1
   +                  1
   ---------------------
    0   1  0  1 1 0 1 0 

    64 + 16 + 8 + 2 = 90 

since the sign bit is 0, the value is postive, so the decimal value is 90



5. For the following 8-bit binary values (show your work): 
  value 1: 01011101 
value 2: 01100101 
a. Add the binary values together. What is the decimal representation of the 
result if it is interpreted as a signed 8-bit value? 

  01011101
+ 01100101
---------
 11000010

 -128 +64 + 2 = -62

 
b. For the same addition, what is the decimal representation of the result if it is 
interpreted as an unsigned 8-bit value? 

 128 + 64 + 2 = 194

c. What is the binary representation of the result of adding value1 and value2 
together? Does this operation result in overflow? If so, under what 
interpretation of the values (signed/unsigned)? 

The binary result of adding 01011101 and 01100101 was 11000010.

As noted earlier, 11000010 is 194 in unsigned form and -62 in signed form.
For overflow:

Signed overflow: Occurs if the sum exceeds the range of -128 to 127. Since 194 (or 11000010) is outside this range for a signed 8-bit value, there is signed overflow.
Unsigned overflow: No overflow here because 194 is within the range for unsigned 8-bit values (0 to 255).

d. What is the binary representation of the result of subtracting value2 from 
value1? Does this operation result in overflow? If so, under what 
interpretation of the values (signed/unsigned)? 

  01100101 (original)
  10011010 (inverted)
+ 00000001
---------
  10011011 (two's complement of value2)

  01011101
+ 10011011
---------
  11111000

  248
The result is 11111000.

As an unsigned 8-bit value, 11111000 = 128 + 64 + 32 + 16 + 8 = 248.
As a signed 8-bit value, 11111000 = -128 + 64 + 32 + 16 + 8 = -8 in two's complement.
Overflow check:

Signed Interpretation: There's no overflow because the result -8 is within the range of signed 8-bit values (which is from -128 to 127).
Unsigned Interpretation: No overflow either, since 248 is within the range of unsigned 8-bit values (0 to 255).


6. Convert the following 2-byte binary numbers to hexadecimal, indicating how each 
part is converted (the binary values are shown with spaces between each 4 digits 
just to make them easier to read): 
a. 0000 0110 0001 1111 =  0000 = 0, 0110 = 6, 0001 = 1, 1111 = 15,  = 0x061F
b. 1100 0101 1110 0101 = 1100 = 12 = C, 0101 = 5, 1110 = 14 = E , 0101 = 5, = 0xC5E5
c. 1010 0111 1101 0110 = 1010 = 10 = A, 0111 = 7, 1101 = 13 = D, 0110 = 6, = 0xA7D6


7. Convert the following hexadecimal numbers to binary, indicating how you 
converted each digit: 
a. 0x23 = 0010 0011
b. 0x852 = 1000 0101 0010
c. 0xc1a6 = 1100 0001 1010 0110
d. 0xefab = 1110 1111 1010 1011


8. Convert the following decimal values to 8-bit (2’s complement) binary and 
additionally convert the binary results to hexadecimal. Show your work: 
a. 12 = 0000 1100 = 0x0C
b. -36 = 1101 1100 = 0xDC
c. 123 = 0111 1011 = 0x7B
d. -123 = 1000 0101 = 0x85



9. Given the following 4-bit binary values, show the results of each bit-wise 
operation, showing both the binary and decimal result value for each (list the 
unsigned decimal value): 
a. 0110 | ~(1010) = 0110 | 0101 = 0110 = 7
b. ~(0110 | 1010) = ~(1110) = 0001 = 1
c. 0111 & ~(1001) = 0111 & 0110 = 0110 = 6
d. (1010 | 0000) & 1111 = 1010 & 1111 = 1010 = 10
e. 0011 ^ 1110 = 1100 = 13
f. 0111 << 2 = 1110 00 = 12
g. 0111 >> 2 = 0001 = 1